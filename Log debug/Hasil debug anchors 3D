(virtual-py3) ivan@b0e368d7ef33:~/i3d-retina-rollover$ keras_retinanet/bin/train.py --step 187 --epoch 2 csv ../i3d_hdf5_lung_data/lung_nodule_annotation_smallbatch.csv ../i3d_hdf5_lung_data/ClassID.csv --val-annotations ../i3d_hdf5_lung_data/lung_nodule_annotation_smallbatch.csv
Using TensorFlow backend.
2019-03-21 05:04:42.776731: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2019-03-21 05:04:43.083101: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1432] Found device 0 with properties:
name: Tesla P100-PCIE-16GB major: 6 minor: 0 memoryClockRate(GHz): 1.3285
pciBusID: 0000:0b:00.0
totalMemory: 15.89GiB freeMemory: 13.48GiB
2019-03-21 05:04:43.083168: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1511] Adding visible gpu devices: 0
2019-03-21 05:04:43.463547: I tensorflow/core/common_runtime/gpu/gpu_device.cc:982] Device interconnect StreamExecutor with strength 1 edge matrix:
2019-03-21 05:04:43.463633: I tensorflow/core/common_runtime/gpu/gpu_device.cc:988]      0
2019-03-21 05:04:43.463643: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1001] 0:   N
2019-03-21 05:04:43.464037: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1115] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 13055 MB memory) -> physical GPU (device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:0b:00.0, compute capability: 6.0)
debug before starting 0, 1, -1 decision making
Python 3.5.2 (default, Nov 12 2018, 13:43:14)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.3.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: annotations['bboxes']
Out[1]: array([[375., 319., 423., 367.]])

In [2]: bboxes_annotation = annotations['bboxes'].copy()

In [3]: image.shape()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
~/i3d-retina-rollover/keras_retinanet/utils/anchors.py in <module>
----> 1 image.shape()

TypeError: 'tuple' object is not callable

In [4]: image.shape
Out[4]: (32, 512, 512, 3)

In [5]: np.max(image)
Out[5]: 151.061

In [6]: np.min(image)
Out[6]: -123.68

In [7]: np.mean(image)
Out[7]: -4.499702

In [8]: np.median(image)
Out[8]: -39.779

In [9]: np.std(image)
Out[9]: 88.45096

In [10]: anchors.shape
Out[10]: (49104, 4)

In [11]: np.max(anchors)
Out[11]: 1022.7005616672649

In [12]: np.min(anchors)
Out[12]: -510.7005616672649

In [13]: np.max(anchors)
Out[13]: 1022.7005616672649

In [14]: np.median(anchors)
Out[14]: 256.0

In [15]: np.std(anchors)
Out[15]: 154.05804661984914

In [16]:
Do you really want to exit ([y]/n)?

debug after computing overlap
Python 3.5.2 (default, Nov 12 2018, 13:43:14)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.3.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: overlaps
Out[1]:
array([[0.        ],
       [0.        ],
       [0.        ],
       ...,
       [0.00912126],
       [0.00575094],
       [0.00362532]])

In [2]: np.unique(overlaps)
Out[2]:
array([0.00000000e+00, 6.13359973e-06, 6.97763888e-05, ...,
       7.11009449e-01, 7.33881482e-01, 7.91812035e-01])

In [3]: np.max(overlaps)
Out[3]: 0.7918120345673191

In [4]: np.min(overlaps)
Out[4]: 0.0

In [5]: np.mean(overlaps)
Out[5]: 0.005689604092207347

In [6]: np.std(overlaps)
Out[6]: 0.037514752954210244

In [7]: np.median(overlaps)
Out[7]: 0.0

In [8]: overlaps[overlaps>0.5]
Out[8]:
array([0.50739746, 0.5233472 , 0.58057788, 0.55135344, 0.50131225,
       0.54278312, 0.55135344, 0.55135344, 0.5233472 , 0.58057788,
       0.50739746, 0.54213621, 0.55135344, 0.71100945, 0.79181203,
       0.54213621, 0.55135344, 0.53379988, 0.55135344, 0.67755882,
       0.73388148, 0.54213621, 0.55135344, 0.5327066 , 0.53532846,
       0.55135344, 0.50131225, 0.54278312, 0.54213621, 0.55135344,
       0.67755882, 0.73388148, 0.53379988, 0.55135344, 0.53379988,
       0.55135344, 0.64627636, 0.68180197, 0.53379988, 0.55135344,
       0.5327066 , 0.50141384, 0.53532846, 0.5327066 , 0.50141384,
       0.5327066 , 0.51897018, 0.56828402, 0.51897018, 0.55030416])

In [9]: len(overlaps[overlaps>0.5])
Out[9]: 50

In [10]: len(overlaps]
  File "<ipython-input-10-620e0336309b>", line 1
    len(overlaps]
                ^
SyntaxError: invalid syntax


In [11]: len(overlaps)
Out[11]: 49104

In [12]:
Do you really want to exit ([y]/n)?

debug after 0 and 1 (background & foreground)
Python 3.5.2 (default, Nov 12 2018, 13:43:14)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.3.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: np.unique(regression_batch)
Out[1]:
array([-39.263493, -37.495728, -35.72796 , ...,  86.55126 ,  88.31903 ,
        90.08679 ], dtype=float32)

In [2]: np.unique(anchors)
Out[2]:
array([-510.70056167, -392.14015238, -382.70056167, ...,  894.70056167,
        904.14015238, 1022.70056167])

In [3]: np.unique(labels_batch)
Out[3]: array([-1.,  0.,  1.], dtype=float32)

In [4]: np.unique(depths_batch)
Out[4]: array([-1.       ,  0.       ,  0.2580645,  1.       ], dtype=float32)

In [5]: len(labels_batch[labels_batch==1])
Out[5]: 100

In [6]: len(regression_batch[regression_batch==1])
Out[6]: 50

In [7]: len(depths_batch[depths_batch==1])
Out[7]: 49154

In [8]: len(depths_batch[depths_batch==0])
Out[8]: 48980

In [9]: len(regression_batch[regression_batch==0])
Out[9]: 48980

In [10]: len(labels_batch[labels_batch==0])
Out[10]: 196242

In [11]: len(depths_batch[depths_batch==-1])
Out[11]: 74

In [12]: len(regression_batch[regression_batch==-1])
Out[12]: 74

In [13]: len(labels_batch[labels_batch==-1])
Out[13]: 74

In [14]:
Do you really want to exit ([y]/n)?

debug after -1 (dropped)
Python 3.5.2 (default, Nov 12 2018, 13:43:14)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.3.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: np.unique(regression_batch)
Out[1]:
array([-39.263493, -37.495728, -35.72796 , ...,  86.55126 ,  88.31903 ,
        90.08679 ], dtype=float32)

In [2]: np.unique(anchors)
Out[2]:
array([-510.70056167, -392.14015238, -382.70056167, ...,  894.70056167,
        904.14015238, 1022.70056167])

In [3]: np.unique(labels_batch)
Out[3]: array([-1.,  0.,  1.], dtype=float32)

In [4]: np.unique(depths_batch)
Out[4]: array([-1.       ,  0.       ,  0.2580645,  1.       ], dtype=float32)

In [5]: len(labels_batch[labels_batch==1])
Out[5]: 50

In [6]: len(labels_batch[labels_batch==0])
Out[6]: 150302

In [7]: len(labels_batch[labels_batch==-1])
Out[7]: 46064

In [8]: len(regression_batch[regression_batch==1])
Out[8]: 0

In [9]: len(regression_batch[regression_batch==0])
Out[9]: 3040

In [10]: len(regression_batch[regression_batch==-1])
Out[10]: 46064

In [11]: len(depths_batch[depths_batch==1])
Out[11]: 49104

In [12]: len(depths_batch[depths_batch==0])
Out[12]: 3040

In [13]: len(depths_batch[depths_batch==-1])
Out[13]: 46064

In [14]:
Do you really want to exit ([y]/n)?

^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
~/i3d-retina-rollover/keras_retinanet/bin/train.py in <module>
    637
    638 if __name__ == '__main__':
--> 639     main()

~/i3d-retina-rollover/keras_retinanet/bin/train.py in main(args)
    521         # make prediction
    522     rgb_sample = train_generator.__getitem__(1)[0]
--> 523     rgb_logits = rgb_model.predict(rgb_sample)
    524     # import IPython; IPython.embed()
    525

~/.virtualenvs/virtual-py3/lib/python3.5/site-packages/keras/engine/training.py in predict(self, x, batch_size, verbose, steps)
   1167                                             batch_size=batch_size,
   1168                                             verbose=verbose,
-> 1169                                             steps=steps)
   1170
   1171     def train_on_batch(self, x, y,

~/.virtualenvs/virtual-py3/lib/python3.5/site-packages/keras/engine/training_arrays.py in predict_loop(model, f, ins, batch_size, verbose, steps)
    292                 ins_batch[i] = ins_batch[i].toarray()
    293
--> 294             batch_outs = f(ins_batch)
    295             batch_outs = to_list(batch_outs)
    296             if batch_index == 0:

~/.virtualenvs/virtual-py3/lib/python3.5/site-packages/keras/backend/tensorflow_backend.py in __call__(self, inputs)
   2713                 return self._legacy_call(inputs)
   2714
-> 2715             return self._call(inputs)
   2716         else:
   2717             if py_any(is_tensor(x) for x in inputs):

~/.virtualenvs/virtual-py3/lib/python3.5/site-packages/keras/backend/tensorflow_backend.py in _call(self, inputs)
   2673             fetched = self._callable_fn(*array_vals, run_metadata=self.run_metadata)
   2674         else:
-> 2675             fetched = self._callable_fn(*array_vals)
   2676         return fetched[:len(self.outputs)]
   2677

~/.virtualenvs/virtual-py3/lib/python3.5/site-packages/tensorflow/python/client/session.py in __call__(self, *args, **kwargs)
   1437           ret = tf_session.TF_SessionRunCallable(
   1438               self._session._session, self._handle, args, status,
-> 1439               run_metadata_ptr)
   1440         if run_metadata:
   1441           proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)

KeyboardInterrupt: